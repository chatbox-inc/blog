{"header":{"title":"Vuex のデータをローカルストレージに格納する","category":"/api/tips/nuxtjs","slug":"gitbook_intro","html_url":"/post/tips/nuxtjs/gitbook_intro","summary":"Vue.jsアプリケーションのデータをシンプルに localStorage に格納してみましょう。\n","created_at":"2018-09-25"},"body":{"content":"<h2>localStorage の利用</h2>\n<p>APIのキャッシュや認証情報など、アプリケーション上で利用するデータを、\nブラウザ内部に保存したい場合、 localStorage を利用するのが一般的です。</p>\n<p>localStorage は <code>localStorage.get()</code> や <code>localStorage.set()</code> 等のブラウザAPI を利用して\n簡単に利用することができますが、オブジェクトの格納時に JSON 化したり、\nVuex のデータを保存する場合、 mutation やデータ初期化にフックしたりと、\n何かと実装が面倒です。</p>\n<p>Vuex を利用したアプリケーションでストアの情報を localStorage に格納する場合、\n<code>vuex-persistedstate</code> を利用することで任意のStore情報を自動的に localStorage に連携してくれます。</p>\n<h3>vuex-persistedstate の使い方</h3>\n<p><code>vuex-persistedstate</code> を利用するには、まず npm 経由でライブラリをインストールします。</p>\n<pre><code class=\"hljs\">$ npm i vuex-persistedstate</code></pre><p>Vuex で利用する場合、Vuex のプラグインとして記述すればOKです。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> createPersistedState <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuex-persistedstate'</span>\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-comment\">// ...</span>\n  plugins: [createPersistedState()],\n})</code></pre><p>また Nuxt.js で利用する場合には、 Nuxt.js にプラグインを記述することで利用が可能になります。</p>\n<p><code>vuex-persistedstate</code> は localStorage を利用するため、 SSR フェーズで利用されないよう、\n<code>ssr: false</code>のフラグを忘れず指定してください。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// nuxt.config.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-comment\">//...</span>\n  plugins: [{ <span class=\"hljs-attr\">src</span>: <span class=\"hljs-string\">'~/plugins/localStorage.js'</span>, <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">false</span> }],\n  <span class=\"hljs-comment\">//...</span>\n}</code></pre><pre><code>// ~/plugins/localStorage.js\n\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) =&gt; {\n  createPersistedState({})(store)\n}\n</code></pre>\n<h3>vuex-persistedstateのカスタマイズ</h3>\n<p><code>createPersistedState</code> 関数にオプションを渡すことで、<code>vuex-persistedstate</code>の挙動をカスタマイズできます。</p>\n<pre><code class=\"hljs\">createPersistedState({\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'yourkey'</span>,\n    <span class=\"hljs-attr\">paths</span>: [ <span class=\"hljs-string\">'...'</span> ]\n    <span class=\"hljs-comment\">// ...</span>\n})</code></pre><p><code>key</code> は localStorage で使用するキー名です。デフォルトは <code>vuex</code> になります。</p>\n<p><code>paths</code> はlocalStorage に格納する対象のstate のパスです。\nVuex モジュール名を指定してモジュール単位での格納も可能です。\n何も指定しない(空の配列)場合は、全ての state を localStorage に格納します。</p>\n<h2>Tips</h2>\n<h2></h2>\n<p>Nuxt.js で<code>vuex-persistedstate</code> 経由で再生したStore情報をもとに、\nページのレンダリングを行った場合、以下のようなエラーが表示されるケースがあります。</p>\n<pre><code class=\"hljs\"></code></pre><p>Vuex の プラグインを自分で記述して、localStorege から Vuex の初期データを注した際にも\n同じような問題に直面します。・</p>\n<p>対応策としては該当箇所のHTML記述を <code>no-ssr</code> コンポーネントで囲むことで\nSSRフェーズでのHTML生成を無効化するといった方法があります。</p>\n<p>また、別の解決策として、<code>vuex-persistedstate</code> による localStorage の初期化タイミングを遅らせるという方法もあります。</p>\n<pre><code>window.onNuxtReady(()=&gt;{\n\n})\n</code></pre>\n<p>しかし、この方法では mounted のタイミングで vuex 上からデータを参照することができず、不便なケースも多いでしょう。</p>\n<p>該当の問題は以下のIssue でも詳細に触れられています。</p>\n<p>https://github.com/robinvdvleuten/vuex-persistedstate/issues/54</p>\n"}}